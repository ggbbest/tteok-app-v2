/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface InjeolmiPoolInterface extends ethers.utils.Interface {
  functions: {
    "ceik()": FunctionFragment;
    "swapToCEIK()": FunctionFragment;
    "addLiquidity()": FunctionFragment;
    "swapToKlay(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ceik", values?: undefined): string;
  encodeFunctionData(functionFragment: "swapToCEIK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapToKlay",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ceik", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapToCEIK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapToKlay", data: BytesLike): Result;

  events: {
    "SwapToCEIK(address,uint256)": EventFragment;
    "SwapToKlay(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapToCEIK"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapToKlay"): EventFragment;
}

export class InjeolmiPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: InjeolmiPoolInterface;

  functions: {
    ceik(overrides?: CallOverrides): Promise<[string]>;

    "ceik()"(overrides?: CallOverrides): Promise<[string]>;

    swapToCEIK(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "swapToCEIK()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    addLiquidity(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "addLiquidity()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapToKlay(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapToKlay(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  ceik(overrides?: CallOverrides): Promise<string>;

  "ceik()"(overrides?: CallOverrides): Promise<string>;

  swapToCEIK(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "swapToCEIK()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  addLiquidity(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "addLiquidity()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  swapToKlay(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapToKlay(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    ceik(overrides?: CallOverrides): Promise<string>;

    "ceik()"(overrides?: CallOverrides): Promise<string>;

    swapToCEIK(overrides?: CallOverrides): Promise<void>;

    "swapToCEIK()"(overrides?: CallOverrides): Promise<void>;

    addLiquidity(overrides?: CallOverrides): Promise<void>;

    "addLiquidity()"(overrides?: CallOverrides): Promise<void>;

    swapToKlay(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "swapToKlay(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SwapToCEIK(user: string | null, amount: null): EventFilter;

    SwapToKlay(user: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    ceik(overrides?: CallOverrides): Promise<BigNumber>;

    "ceik()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapToCEIK(overrides?: PayableOverrides): Promise<BigNumber>;

    "swapToCEIK()"(overrides?: PayableOverrides): Promise<BigNumber>;

    addLiquidity(overrides?: PayableOverrides): Promise<BigNumber>;

    "addLiquidity()"(overrides?: PayableOverrides): Promise<BigNumber>;

    swapToKlay(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "swapToKlay(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ceik(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ceik()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapToCEIK(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "swapToCEIK()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    addLiquidity(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "addLiquidity()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapToKlay(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapToKlay(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
